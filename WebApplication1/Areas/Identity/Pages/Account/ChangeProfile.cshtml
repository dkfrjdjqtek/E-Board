@* 2025.09.17 Changed: EBValidate + _ValidationAlert로 에러 표시 통일.
   - 수동 parentErrors 계산/렌더 제거
   - 각 필드 하단 span asp-validation-for 제거
   - 부모 폼/모달 폼 각각 alert 박스(id: cp-alert, email-alert) 도입
   - 서버 ModelState를 errMap으로 직렬화하여 초기 invalid/요약 동기화
   - 부모 폼 invalid-form 시 EBValidate로 필드 하단 + 상단 요약 1회 표시 고정 *@
@page
@model WebApplication1.Areas.Identity.Pages.Account.ChangeProfileModel
@using Microsoft.AspNetCore.Mvc.Rendering
@inject Microsoft.Extensions.Localization.IStringLocalizer<SharedResource> _S
@{
    ViewData["Title"] = _S["CP_Title"];

    // 2025.09.17 Added: 서버 ModelState → {키:[메시지]} 맵 (부모/모달 분리)
    var parentMap = ViewData.ModelState
        .Where(kv => !string.IsNullOrEmpty(kv.Key)
                     && kv.Key.StartsWith("Input.", StringComparison.OrdinalIgnoreCase)
                     && kv.Value?.Errors?.Count > 0)
        .ToDictionary(
            kv => kv.Key,
            kv => kv.Value!.Errors.Select(e => e.ErrorMessage).ToArray()
        );
    var parentErrors = parentMap.Values.SelectMany(v => v).ToArray();

    var emailMap = ViewData.ModelState
        .Where(kv => !string.IsNullOrEmpty(kv.Key)
                     && kv.Key.StartsWith("EmailChange.", StringComparison.OrdinalIgnoreCase)
                     && kv.Value?.Errors?.Count > 0)
        .ToDictionary(
            kv => kv.Key,
            kv => kv.Value!.Errors.Select(e => e.ErrorMessage).ToArray()
        );
    var emailErrors = emailMap.Values.SelectMany(v => v).ToArray();
}

<h2 class="mb-3">@_S["CP_Title"]</h2>

@* 2025.09.17 Added: 부모 폼 요약 경고 박스(id=cp-alert) *@
@await Html.PartialAsync(
            "~/Views/Shared/_ValidationAlert.cshtml",
            parentErrors,
            new ViewDataDictionary(ViewData) { ["AlertId"] = "cp-alert" }
        )

<form id="parentForm" method="post" asp-page-handler="Save" novalidate>
    @Html.AntiForgeryToken()

    <div class="row g-3">
        <div class="col-md-6">
            <label asp-for="Input!.CompCd" class="form-label"></label>
            <select asp-for="Input!.CompCd" asp-items="Model.CompOptions!" class="form-select">
                <option value="">-- @_S["_CM_Select"] --</option>
            </select>
            @* <span asp-validation-for="Input!.CompCd" class="text-danger"></span> *@
        </div>

        <div class="col-md-6">
            <label asp-for="Input!.DisplayName" class="form-label"></label>
            <input asp-for="Input!.DisplayName" class="form-control" />
            @* <span asp-validation-for="Input!.DisplayName" class="text-danger"></span> *@
        </div>

        <div class="col-md-6">
            <label asp-for="Input!.UserName" class="form-label"></label>
            <input asp-for="Input!.UserName" class="form-control" readonly />
        </div>

        <div class="col-md-6">
            <label asp-for="Input!.Email" class="form-label"></label>
            <div class="input-group">
                <input asp-for="Input!.Email" class="form-control" readonly />
                <button type="button" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#changeEmailModal">
                    @_S["_CM_Change"]
                </button>
            </div>
        </div>

        <div class="col-md-6">
            <label asp-for="Input!.DepartmentId" class="form-label"></label>
            <select asp-for="Input!.DepartmentId" asp-items="Model.DepartmentOptions!" class="form-select">
                <option value="">-- @_S["_CM_Select"] --</option>
            </select>
            @* <span asp-validation-for="Input!.DepartmentId" class="text-danger"></span> *@
        </div>

        <div class="col-md-6">
            <label asp-for="Input!.PositionId" class="form-label"></label>
            <select asp-for="Input!.PositionId" asp-items="Model.PositionOptions!" class="form-select">
                <option value="">-- @_S["_CM_Select"] --</option>
            </select>
            @* <span asp-validation-for="Input!.PositionId" class="text-danger"></span> *@
        </div>

        <div class="col-md-6">
            <label asp-for="Input!.PhoneNumber" class="form-label"></label>
            <input asp-for="Input!.PhoneNumber" class="form-control" />
            @* <span asp-validation-for="Input!.PhoneNumber" class="text-danger"></span> *@
        </div>

        <div class="col-md-6">
            <label asp-for="Input!.CurrentPassword" class="form-label"></label>
            <input asp-for="Input!.CurrentPassword" class="form-control" type="password" autocomplete="current-password" />
            @* <span asp-validation-for="Input!.CurrentPassword" class="text-danger"></span> *@
        </div>

        <div class="col-md-6">
            <label asp-for="Input!.NewPassword" class="form-label"></label>
            <input asp-for="Input!.NewPassword" class="form-control" type="password" autocomplete="new-password" />
            @* <span asp-validation-for="Input!.NewPassword" class="text-danger"></span> *@
        </div>

        <div class="col-md-6">
            <label asp-for="Input!.ConfirmNewPassword" class="form-label"></label>
            <input asp-for="Input!.ConfirmNewPassword" class="form-control" type="password" autocomplete="new-password" />
            @* <span asp-validation-for="Input!.ConfirmNewPassword" class="text-danger"></span> *@
        </div>
    </div>

    <div class="col-12 mt-3">
        <button type="submit" form="parentForm" class="btn btn-primary w-100 py-2">@_S["_CM_Save"]</button>
    </div>
</form>

<div class="modal fade" id="changeEmailModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="emailChangeForm" method="post" asp-page-handler="SendEmailChange" novalidate>
                @Html.AntiForgeryToken()

                <div class="modal-header">
                    <h5 class="modal-title">@_S["CP_MD_Title"]</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    @await Html.PartialAsync(
                             "~/Views/Shared/_ValidationAlert.cshtml",
                             emailErrors,
                             new ViewDataDictionary(ViewData) { ["AlertId"] = "email-alert" }
                             )

                    <div class="mb-3">
                        <label asp-for="EmailChange!.NewEmail" class="form-label"></label>
                        <!-- 2025.09.18 Changed: 자동완성/자동수정/오타수정 방지 -->
                        <input asp-for="EmailChange!.NewEmail"
                               class="form-control"
                               autocomplete="off"
                               autocapitalize="off"
                               spellcheck="false" />
                    </div>

                    <div class="mb-3">
                        <label asp-for="EmailChange!.CurrentPassword" class="form-label"></label>
                        <!-- 2025.09.18 Changed: 자동완성 방지 -->
                        <input asp-for="EmailChange!.CurrentPassword"
                               class="form-control"
                               type="password"
                               autocomplete="off"
                               autocapitalize="off"
                               spellcheck="false" />
                    </div>
                </div>

                <div class="modal-footer d-flex w-100 gap-2">
                    <button type="submit" class="btn btn-primary" style="flex: 1 0 0;">
                        @_S["CP_MD_SendConfirmationMail"]
                    </button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="flex: 1 0 0;">
                        @_S["_CM_Cancel"]
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // 2025.09.18 Changed: 모달을 닫을 때 값/기본값/보더/에러를 완전히 초기화
        (function () {
            var modalEl = document.getElementById('changeEmailModal');
            if (!modalEl) return;

            modalEl.addEventListener('hidden.bs.modal', function () {
                var form = document.getElementById('emailChangeForm');
                if (!form) return;

                // 현재 값 초기화 + 'value' 속성 제거(defaultValue도 공백으로)
                form.querySelectorAll('input, textarea').forEach(function (el) {
                    try {
                        el.value = '';
                        el.removeAttribute('value'); // Razor가 렌더링한 초기값도 지움
                    } catch (_) { /* no-op */ }
                });

                // jQuery Validate 상태 초기화
                var $f = $('#emailChangeForm');
                var v = $f.data('validator');
                if (v) v.resetForm();

                // 클래스/ARIA 제거 (보더/아이콘)
                form.querySelectorAll('.is-invalid, .is-valid, .input-validation-error')
                    .forEach(function (el) {
                        el.classList.remove('is-invalid', 'is-valid', 'input-validation-error');
                        el.removeAttribute('aria-invalid');
                    });

                // EBValidate 메시지/피드백 제거
                if (window.EBValidate) EBValidate.clearAll(form);

                // 상단 요약 박스 비우고 숨김
                var sum = document.getElementById('email-alert');
                if (sum) {
                    var ul = sum.querySelector('ul');
                    if (ul) ul.innerHTML = '';
                    sum.classList.add('d-none');
                }
            });
        })();
    </script>

    @* (나머지 스크립트: 자동 재오픈/검증 훅 등 기존 그대로) *@
    @if ((ViewData["OpenEmailModal"] as bool?) == true)
    {
        <script>
            window.addEventListener('load', function () {
                var el = document.getElementById('changeEmailModal');
                if (el) new bootstrap.Modal(el, { backdrop: 'static', focus: true }).show();
            });
        </script>
    }

    <script>
        (function () {
            var $f = $('#emailChangeForm');
            if ($f.length === 0) return;

            function collectEmailMessages() {
                var v = $f.data('validator');
                if (!v) return [];
                var msgs = [];
                Object.keys(v.errorMap || {}).forEach(function (name) {
                    if (name.indexOf('EmailChange.') === 0 && v.errorMap[name]) msgs.push(v.errorMap[name]);
                });
                (v.errorList || []).forEach(function (item) {
                    var name = item.element && item.element.name;
                    if (name && name.indexOf('EmailChange.') === 0 && item.message) msgs.push(item.message);
                });
                return Array.from(new Set(msgs));
            }

            $(function () {
                var v = $f.data('validator');
                if (v) {
                    v.settings.onkeyup = false;
                    v.settings.onfocusout = false;
                    v.settings.onclick = false;
                }
            });

            $f.on('invalid-form.validate', function (_e, v) {
                if (!window.EBValidate) return;
                EBValidate.clearAll($f[0]);
                (v.errorList || []).forEach(function (item) {
                    EBValidate.setInvalid(item.element, item.message);
                });
                var sum = $f.find('#email-alert').first();
                var msgs = collectEmailMessages();
                if (sum.length) {
                    var ul = sum.find('ul');
                    if (ul.length === 0) { ul = $('<ul/>').appendTo(sum); }
                    ul.empty();
                    msgs.forEach(function (m) { $('<li/>').text(m).appendTo(ul); });
                    sum.removeClass('d-none');
                }
            });
        })();
    </script>
    <script>
        (function () {
            var $p = $('#parentForm');
            if ($p.length === 0) return;

            // jQuery Validate 인스턴스 확보
            var v = $p.data('validator') || $p.validate();
            if (!v) return;

            // 기본 동작 끄기 + 테두리 클래스 제어
            v.settings.onkeyup = false;
            v.settings.onfocusout = false;
            v.settings.onclick = false;
            v.settings.highlight = function (el) {
                $(el).addClass('is-invalid').removeClass('is-valid');
            };
            v.settings.unhighlight = function (el) {
                $(el).removeClass('is-invalid is-valid');
            };

            // invalid-form 시, 필드 하단/요약 동기화
            $p.on('invalid-form.validate', function (_e, v2) {
                var form = $p[0];

                // EBValidate 없을 때도 최소한 요약/테두리는 보장
                if (window.EBValidate) EBValidate.clearAll(form);

                // 각 필드 표시
                (v2.errorList || []).forEach(function (item) {
                    if (window.EBValidate) {
                        EBValidate.setInvalid(item.element, item.message);
                    } else {
                        // EBValidate가 없다면 is-invalid만
                        $(item.element).addClass('is-invalid');
                    }
                });

                // 상단 요약(cp-alert)
                var sum = document.getElementById('cp-alert');
                if (sum) {
                    var ul = sum.querySelector('ul') || sum.appendChild(document.createElement('ul'));
                    ul.innerHTML = '';
                    var msgs = Array.from(new Set((v2.errorList || []).map(function (it) { return it.message; })));
                    msgs.forEach(function (m) {
                        var li = document.createElement('li'); li.textContent = m; ul.appendChild(li);
                    });
                    sum.classList.remove('d-none');
                }
            });
        })();
    </script>
    <script>
        (function () {
            var $p = $('#parentForm');
            if ($p.length === 0) return;

            // 서버에서 넘긴 ModelState 에러 맵 그대로 사용
            var server = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(parentMap));
            var allMsgs = [];

            Object.keys(server || {}).forEach(function (name) {
                var el = $p.find('[name="' + name + '"]')[0];
                (server[name] || []).forEach(function (msg) {
                    allMsgs.push(msg);
                    if (el) {
                        $(el).addClass('is-invalid');
                        if (window.EBValidate) EBValidate.setInvalid(el, msg);
                    }
                });
            });

            if (allMsgs.length) {
                var sum = document.getElementById('cp-alert');
                if (sum) {
                    var ul = sum.querySelector('ul') || sum.appendChild(document.createElement('ul'));
                    ul.innerHTML = '';
                    Array.from(new Set(allMsgs)).forEach(function (m) {
                        var li = document.createElement('li'); li.textContent = m; ul.appendChild(li);
                    });
                    sum.classList.remove('d-none');
                }
            }
        })();
    </script>

}