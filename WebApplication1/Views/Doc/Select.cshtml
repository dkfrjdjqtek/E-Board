@* 2025.10.14 Added: /Doc/Create 방어 리다이렉트 시 TempData 알림 표시 처리 추가 (VALIDATION SUMMARY) *@
@using Microsoft.AspNetCore.Mvc.Rendering
@inject Microsoft.Extensions.Localization.IStringLocalizer<SharedResource> S
@{
    ViewData["Title"] = S["DOC_Title_New"]; // 문서 작성
    var serverList = ViewBag.Templates as IEnumerable<SelectListItem> ?? Enumerable.Empty<SelectListItem>();
    // 2025.10.14 Added: 서버에서 전달된 경고 키(예: DOC_Val_TemplateRequired) 읽기
    var serverAlertKey = TempData["NewDocAlert"] as string;
}
<style>
    .w-22rem {
        width: 22rem
    }
</style>

<div class="container-xxl py-3">
    <h3 class="mb-3">@S["DOC_Title_New"]</h3>

    <!-- EB-VALIDATE 요약 -->
    <div id="newdoc-alert" class="mb-3" aria-live="polite"></div>

    <div class="card">
        <div class="card-body">
            <div class="row g-3 align-items-end">
                <div class="col-lg-6">
                    <label for="tplSelect" class="form-label">@S["DOC_Label_Template"]</label>
                    <select id="tplSelect" class="form-select">
                        <option value="">@S["DOC_Opt_SelectTemplate"]</option>
                        @foreach (var item in serverList)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </select>
                    <div class="form-text text-muted">@S["DOC_Help_TemplateSelect"]</div>
                </div>

                <div class="col-lg-3">
                    <label for="tplQuery" class="form-label">@S["DOC_Label_Search"]</label>
                    <input id="tplQuery" type="text" class="form-control" placeholder="@S["DOC_Placeholder_TemplateSearch"]" />
                </div>

                <div class="col-lg-3 text-end">
                    <button id="btnCompose" class="btn btn-primary">@S["DOC_Btn_Compose"]</button>
                    <button id="btnCancel" class="btn btn-outline-secondary">@S["DOC_Btn_Cancel"]</button>
                </div>
            </div>

            <div class="mt-3" id="clientList" hidden>
                <div class="table-responsive">
                    <table class="table table-sm align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>@S["DOC_Col_Template"]</th>
                                <th>@S["DOC_Col_Description"]</th>
                                <th style="width:1%;white-space:nowrap">@S["DOC_Col_Action"]</th>
                            </tr>
                        </thead>
                        <tbody id="tplRows"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const EBV = window.EBValidate || {};
        const S = (k) => k;

        // 2025.10.14 Added: 서버 전달 알림(TempData) → VALIDATION SUMMARY 출력
        (function showServerAlert() {
            const SERVER_ALERT = '@(serverAlertKey ?? "")';
            if (SERVER_ALERT) {
                if (EBV.showAlert) EBV.showAlert('newdoc-alert', [S(SERVER_ALERT)], { variant: 'danger' });
                else document.getElementById('newdoc-alert').innerHTML =
                    '<div class="alert alert-danger">' + S(SERVER_ALERT) + '</div>';
            }
        })();

        const hasServerList = document.querySelector('#tplSelect option[value]:not([value=""])') !== null;

        if (!hasServerList) {
            fetch('/DocumentTemplates/list?active=1')
                .then(r => r.ok ? r.json() : [])
                .then(list => {
                    const sel = document.getElementById('tplSelect');
                    const rows = document.getElementById('tplRows');
                    const has = Array.isArray(list) && list.length > 0;

                    if (has) {
                        list.forEach(t => {
                            const opt = document.createElement('option');
                            opt.value = t.code;
                            opt.textContent = t.title;
                            sel.append(opt);
                        });

                        document.getElementById('clientList').hidden = false;
                        rows.innerHTML = '';
                        list.forEach(t => {
                            const tr = document.createElement('tr');
                            tr.innerHTML =
                                `<td><strong>${escapeHtml(t.title || '')}</strong><div class="small text-muted">${escapeHtml(t.code || '')}</div></td>
                                     <td>${escapeHtml(t.description || '')}</td>
                                     <td class="text-end">
                                       <button type="button" class="btn btn-sm btn-outline-primary" data-code="${escapeAttr(t.code || '')}">
                                         ${S('DOC_Btn_Compose')}
                                       </button>
                                     </td>`;
                            rows.append(tr);
                        });

                        rows.addEventListener('click', (e) => {
                            const btn = e.target.closest('button[data-code]');
                            if (!btn) return;
                            goCompose(btn.getAttribute('data-code'));
                        });
                    }
                })
                .catch(() => { /* ignore */ });
        }

        document.getElementById('tplQuery')?.addEventListener('input', function () {
            const q = (this.value || '').toLowerCase();
            const sel = document.getElementById('tplSelect');
            Array.from(sel.options).forEach((opt, i) => {
                if (i === 0) return;
                opt.hidden = q && !opt.text.toLowerCase().includes(q);
            });
            document.querySelectorAll('#tplRows tr').forEach(tr => {
                const text = tr.textContent.toLowerCase();
                tr.hidden = q && !text.includes(q);
            });
        });

        document.getElementById('btnCompose')?.addEventListener('click', function (e) {
            e.preventDefault();
            const code = document.getElementById('tplSelect').value;
            if (!code) { showErrors([S('DOC_Val_TemplateRequired')]); return; }
            goCompose(code);
        });

        document.getElementById('btnCancel')?.addEventListener('click', function (e) {
            e.preventDefault();
            history.length > 1 ? history.back() : location.href = '/';
        });

        function goCompose(code) {
            location.href = '/Doc/Create?templateCode=' + encodeURIComponent(code);
        }
        function showErrors(msgs) {
            if (EBV.showAlert) EBV.showAlert('newdoc-alert', msgs, { variant: 'danger' });
            else document.getElementById('newdoc-alert').innerHTML = '<div class="alert alert-danger">' + msgs.join('<br>') + '</div>';
        }
        function escapeHtml(s) { return String(s || '').replace(/[&<>"']/g, m => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[m])); }
        function escapeAttr(s) { return escapeHtml(s).replace(/"/g, '&quot;'); }
    </script>
}
