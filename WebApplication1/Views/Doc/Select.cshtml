@* 2025.10.16 Changed: 작성하기 클릭 시 폼 submit 대신 선택된 templateCode로 명시적 이동 처리
   2025.10.16 Added: sessionStorage 상태 저장/복원 + 초기 버튼 비활성화 + fetch(credentials:'same-origin')
   Note: /DocumentTemplates/* API는 { items:[{id,text}], selectedValue? } 포맷을 반환 *@

@model WebApplication1.Models.DocTLViewModel
@removeTagHelper Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper, Microsoft.AspNetCore.Mvc.TagHelpers
@inject Microsoft.Extensions.Localization.IStringLocalizer<SharedResource> S

@{
    ViewData["Title"] = S["DOC_Title_New"];

    var compOptions = Model?.CompOptions ?? Enumerable.Empty<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>();
    var deptOptions = Model?.DepartmentOptions ?? Enumerable.Empty<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>();

    var txtSelect = S["_CM_Select"].Value;
    var txtTplPh = S["DOC_Opt_SelectTemplate"].Value;
}

<div class="container-xxl">
    <div class="card">
        <div class="card-body">
            <form id="frm-newdoc" method="get" action="/Doc/Create">
                <div class="row g-3 align-items-end">

                    <div class="col-12 col-lg-2">
                        <label class="form-label mb-1" for="compCd">@S["DOC_Label_Site"]</label>
                        <select id="compCd" name="compCd" class="form-select form-select-sm">
                            @foreach (var it in compOptions)
                            {
                                if (it.Selected)
                                {
                                    <option value="@it.Value" selected="selected">@it.Text</option>
                                }
                                else
                                {
                                    <option value="@it.Value">@it.Text</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="col-12 col-lg-2">
                        <label class="form-label mb-1" for="departmentId">@S["DOC_Label_Department"]</label>
                        <select id="departmentId" name="departmentId" class="form-select form-select-sm">
                            @foreach (var it in deptOptions)
                            {
                                if (it.Selected)
                                {
                                    <option value="@it.Value" selected="selected">@it.Text</option>
                                }
                                else
                                {
                                    <option value="@it.Value">@it.Text</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="col-12 col-lg-2">
                        <label class="form-label mb-1" for="kindCode">@S["DOC_Label_Category"]</label>
                        <select id="kindCode" name="kindCode" class="form-select form-select-sm">
                            <option value="__SELECT__">@txtSelect</option>
                        </select>
                    </div>

                    <div class="col-12 col-lg-3">
                        <label class="form-label mb-1" for="templateCode">@S["DOC_Label_TemplateName"]</label>
                        <select id="templateCode" name="templateCode" class="form-select form-select-sm">
                            <option value="">@txtTplPh</option>
                        </select>
                    </div>

                    <div class="col-12 col-lg-1 d-grid d-lg-flex justify-content-lg-start">
                        <button id="btn-compose" type="button" class="btn btn-secondary btn-sm w-100">@S["DOC_Btn_Compose"]</button>
                    </div>

                    <div class="col-12 col-lg-2 d-grid d-lg-flex justify-content-lg-end">
                        <button id="btn-cancel" type="button" class="btn btn-light btn-sm w-100">@S["DOC_Btn_Cancel"]</button>
                    </div>
                </div>
            </form>

            <div class="mt-2 text-muted small">@S["DOC_Help_TemplateSelect"]</div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (() => {
            const L = {
                SELECT: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(S["_CM_Select"].Value))
                    };
            const BASE = "/DocumentTemplates";
            const SS_KEY = "EB_DOC_NEW_STATE";

            const compSel = document.getElementById('compCd');
            const deptSel = document.getElementById('departmentId');
            const kindSel = document.getElementById('kindCode');
            const tplSel = document.getElementById('templateCode');
            const btn = document.getElementById('btn-compose');

            // 초기 버튼 비활성화
            btn.disabled = true;

            function clear(sel) { while (sel.options.length) sel.remove(0); }
            function ph(sel) { sel.add(new Option(L.SELECT, '__SELECT__')); sel.value = '__SELECT__'; }
            function add(sel, items) { (items || []).forEach(it => sel.add(new Option(it.text ?? '', String(it.id ?? '')))); }
            function en() { btn.disabled = !(tplSel.value && tplSel.value !== '__SELECT__'); }

            async function fx(url) {
                try {
                    const r = await fetch(url, {
                        headers: { 'X-Requested-With': 'XMLHttpRequest' },
                        credentials: 'same-origin'
                    });
                    if (!r.ok) throw new Error('net');
                    return await r.json();
                } catch (e) {
                    console.warn('load failed:', url, e);
                    return { items: [] };
                }
            }

            function saveState() {
                const st = {
                    compCd: compSel.value || '',
                    departmentId: deptSel.value || '',
                    kind: kindSel.value || '',
                    templateCode: tplSel.value || ''
                };
                try { sessionStorage.setItem(SS_KEY, JSON.stringify(st)); } catch { }
            }
            function loadState() {
                try {
                    const t = sessionStorage.getItem(SS_KEY);
                    return t ? JSON.parse(t) : null;
                } catch { return null; }
            }
            function clearState() { try { sessionStorage.removeItem(SS_KEY); } catch { } }

            async function loadDepts(preset) {
                const compCd = compSel.value || '';
                clear(deptSel); ph(deptSel);
                clear(kindSel); ph(kindSel);
                clear(tplSel); tplSel.add(new Option(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(S["DOC_Opt_SelectTemplate"].Value)), ''));
                if (!compCd) { en(); return; }

                const data = await fx(`${BASE}/get-departments?compCd=${encodeURIComponent(compCd)}`);
                clear(deptSel); add(deptSel, data.items || []);

                if (preset && preset.departmentId !== undefined) {
                    const want = String(preset.departmentId);
                    const has = Array.from(deptSel.options).some(o => o.value === want);
                    deptSel.value = has ? want : "__SELECT__";
                } else if (data.selectedValue !== undefined) {
                    const want = String(data.selectedValue ?? "");
                    const has = Array.from(deptSel.options).some(o => o.value === want);
                    deptSel.value = has ? want : "__SELECT__";
                }
                en();
            }

            async function loadKinds(preset) {
                const compCd = compSel.value || '';
                const deptV = deptSel.value;

                clear(kindSel); ph(kindSel);
                clear(tplSel); tplSel.add(new Option(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(S["DOC_Opt_SelectTemplate"].Value)), ''));
                if (!compCd || deptV === '__SELECT__') { en(); return; }

                const deptParam = (deptV === '' ? '0' : deptV);
                const data = await fx(`${BASE}/get-kinds?compCd=${encodeURIComponent(compCd)}&departmentId=${encodeURIComponent(deptParam)}`);
                add(kindSel, data.items || []);

                if (preset && preset.kind) {
                    const has = Array.from(kindSel.options).some(o => o.value === preset.kind);
                    kindSel.value = has ? preset.kind : '__SELECT__';
                }
                en();
            }

            async function loadDocs(preset) {
                const compCd = compSel.value || '';
                const deptV = deptSel.value;
                const kindV = kindSel.value;

                clear(tplSel);
                tplSel.add(new Option(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(S["DOC_Opt_SelectTemplate"].Value)), ''));
                if (!compCd || deptV === '__SELECT__' || kindV === '__SELECT__') { en(); return; }

                const deptParam = (deptV === '' ? '0' : deptV);
                const qs = new URLSearchParams({ compCd, departmentId: deptParam, kind: kindV });
                const data = await fx(`${BASE}/get-documents?${qs.toString()}`);

                add(tplSel, data.items || []);
                if (preset && preset.templateCode) {
                    const has = Array.from(tplSel.options).some(o => o.value === preset.templateCode);
                    tplSel.value = has ? preset.templateCode : '';
                }
                en();
            }

            compSel.addEventListener('change', async () => { await loadDepts(); await loadKinds(); await loadDocs(); saveState(); });
            deptSel.addEventListener('change', async () => { await loadKinds(); await loadDocs(); saveState(); });
            kindSel.addEventListener('change', async () => { await loadDocs(); saveState(); });
            tplSel.addEventListener('change', () => { en(); saveState(); });

            btn.addEventListener('click', () => {
                const t = tplSel.value;
                if (!t || t === '__SELECT__') return;
                saveState();
                location.href = `/Doc/Create?templateCode=${encodeURIComponent(t)}`;
            });

            document.getElementById('btn-cancel')?.addEventListener('click', () => {
                clearState();
                try { history.back(); } catch { location.href = '/'; }
            });

            (async function init() {
                en();
                const preset = loadState();
                if (preset && preset.compCd) {
                    if (Array.from(compSel.options).some(o => o.value === preset.compCd)) {
                        compSel.value = preset.compCd;
                    }
                    await loadDepts(preset);
                    await loadKinds(preset);
                    await loadDocs(preset);
                }
            })();
        })();
    </script>
}
