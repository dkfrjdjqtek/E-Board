@using System.Text.Json
@inject Microsoft.Extensions.Localization.IStringLocalizer<SharedResource> S
@{
    ViewData["Title"] = S["DTL_Title_NewTemplate"];
}
<style>
    .flex-eq {
        flex: 1 0 0;
        min-width: 0;
    }

    .table thead th {
        white-space: nowrap;
    }

    .cell-a1 {
        width: 14rem;
    }

    .key-input {
        min-width: 10rem;
    }

    .a1-active {
        box-shadow: 0 0 0 .2rem rgba(13,110,253,.25);
    }

    /* A1 입력칸과 버튼을 한 줄로 고정 */
    .cell-a1 .input-group {
        max-width: 14rem;
    }
    /* 필요 시 폭 조정 */
    .cell-a1 .form-control {
        max-width: 8rem;
    }
    /* A1 텍스트 폭 */
    .cell-a1 .btn {
        white-space: nowrap;
    }

    /* 미리보기 영역은 스크롤을 허용해서 넘치지 않게 처리 */
    #xlPreview {
        overflow: auto; /* 가로/세로 스크롤 */
        max-height: 520px; /* 높이 제한 원하시면 조절 */
        border: 1px solid #e5e7eb;
        border-radius: .25rem;
    }

    /* preview table */
    #xlPreview table {
        table-layout: fixed;
        border-collapse: collapse;
        width: max-content;
        min-width: 100%;
    }

    #xlPreview th, #xlPreview td {
        border: 1px solid #e5e7eb;
        padding: 2px 4px;
        font-size: 12px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    #xlPreview .rc {
        background: #f9fafb;
    }
</style>

<div class="container-fluid py-3">
    <h5 class="mb-3">@S["DTL_Title_NewTemplate"]</h5>

    @* 성공 메세지는 배너로 안 띄움(토스트만), 오류만 배너로 표시 *@
    @{
        var alertMsg = (TempData["Alert"] as string) ?? (ViewBag.Alert as string);
    }
    @if (!string.IsNullOrWhiteSpace(alertMsg))
    {
        <div class="alert alert-danger mb-3">@alertMsg</div>
    }

    <!-- 디스크립터 JSON -->
    <script id="desc-json" type="application/json">
        @Html.Raw(ViewBag.DescriptorJson ?? "{}")
    </script>
    <!-- 엑셀 미리보기 JSON -->
    <script id="preview-json" type="application/json">
        @Html.Raw(ViewBag.PreviewJson ?? "{}")
    </script>

    <form id="mapForm" method="post" action="/DocumentTemplates/map-save">
        @Html.AntiForgeryToken()
        <input type="hidden" name="descriptor" id="descriptor">
        <input type="hidden" name="excelPath" value="@ViewBag.ExcelPath">

        <div class="row g-3">
            <!-- 입력 필드 매핑 -->
            <div class="col-12 col-lg-7">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center py-2">
                        <span>@S["DTL_Section_Fields"]</span>
                        <button id="btnAddField" type="button" class="btn btn-outline-primary btn-sm">@S["_CM_Add"]</button>
                    </div>
                    <div class="card-body p-2">
                        <div class="table-responsive">
                            <table class="table table-sm align-middle mb-0">
                                <thead>
                                    <tr>
                                        <th>@S["DTL_Col_FieldKey"]</th>
                                        <th style="width:8rem">@S["DTL_Col_Type"]</th>
                                        <th class="cell-a1">@S["DTL_Col_CellA1"]</th>
                                    </tr>
                                </thead>
                                <tbody id="tblFieldsBody"></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 결재란 매핑 -->
            <div class="col-12 col-lg-5">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center py-2">
                        <span>@S["DTL_Section_Approvals"]</span>
                        <button id="btnAddAppr" type="button" class="btn btn-outline-primary btn-sm">@S["_CM_Add"]</button>
                    </div>
                    <div class="card-body p-2">
                        <div class="table-responsive">
                            <table class="table table-sm align-middle mb-0">
                                <thead>
                                    <tr>
                                        <th style="width:4rem">@S["DTL_Col_Slot"]</th>
                                        <th style="width:6rem">@S["DTL_Col_Part"]</th>
                                        <th class="cell-a1">@S["DTL_Col_CellA1"]</th>
                                    </tr>
                                </thead>
                                <tbody id="tblApprBody"></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 엑셀 미리보기 -->
            <div class="col-12">
                <div class="card">
                    <div class="card-header py-2">@S["DTL_Section_Preview"]</div>
                    <div class="card-body">
                        <div class="text-muted small mb-2">@S["DTL_Info_ClickToFill"]</div>
                        <div id="xlPreview" class="mt-2"></div>
                        <div class="form-text mt-2">@S["DTL_Preview_MaxNote"]</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 하단 버튼 -->
        <div class="d-flex gap-2 mt-3">
            <button id="btnSave" type="button" class="btn btn-primary flex-eq">@S["_CM_Save"]</button>
            <a class="btn btn-secondary flex-eq" href="javascript:history.back()">@S["_CM_Close"]</a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        // 다국어 문자열(스크립트에서 사용하는 텍스트)
        const L = {
            PickCell: @Html.Raw(JsonSerializer.Serialize(S["DTL_Btn_PickCell"].Value)),
            NoRows: @Html.Raw(JsonSerializer.Serialize(S["DTL_Msg_NoRows"].Value))
        };
    </script>

    <script>
        // (1) Excel preview (merge/width 반영) + 셀 클릭 훅
        (function () {
            const raw = (document.getElementById('preview-json')?.textContent || '{}').trim();
            let preview = {};
            try { preview = JSON.parse(raw); } catch { preview = {}; }
            const wrap = document.getElementById('xlPreview');
            if (!preview.cells) { if (wrap) wrap.innerHTML = `<div class="text-muted">@S["DTL_NoPreview"]</div>`; return; }


            const merges = preview.merges || [];
            const skip = Array.from({ length: preview.rows + 1 }, () => Array(preview.cols + 1).fill(false));
            const topLeft = new Map();
            for (const [r1, c1, r2, c2] of merges) {
                const rs = r2 - r1 + 1, cs = c2 - c1 + 1;
                topLeft.set(`${r1},${c1}`, { rs, cs });
                for (let r = r1; r <= r2; r++) for (let c = c1; c <= c2; c++) if (!(r === r1 && c === c1)) skip[r][c] = true;
            }

            const scale = 6;
            const colW = (preview.colW || []).map(w => Math.max(32, Math.round(w * scale)));

            let html = `<table><colgroup>`;
            for (let c = 1; c <= preview.cols; c++) html += `<col style="width:${colW[c - 1] || 80}px">`;
            html += `</colgroup><thead><tr><th class="rc"></th>`;
            for (let c = 1; c <= preview.cols; c++) html += `<th class="rc">${toCol(c)}</th>`;
            html += `</tr></thead><tbody>`;
            for (let r = 1; r <= preview.rows; r++) {
                html += `<tr><th class="rc">${r}</th>`;
                for (let c = 1; c <= preview.cols; c++) {
                    if (skip[r][c]) continue;
                    const key = `${r},${c}`;
                    const span = topLeft.get(key);
                    const rs = span?.rs || 1, cs = span?.cs || 1;
                    const txt = (preview.cells[r - 1]?.[c - 1] || '').replace(/&/g, '&amp;').replace(/</g, '&lt;');
                    html += `<td ${rs > 1 ? `rowspan="${rs}"` : ''} ${cs > 1 ? `colspan="${cs}"` : ''} data-a1="${toA1(r, c)}">${txt}</td>`;
                }
                html += `</tr>`;
            }
            html += `</tbody></table>`;

            if (wrap) wrap.innerHTML = html;

            function toCol(n) { let s = ''; while (n > 0) { const m = (n - 1) % 26; s = String.fromCharCode(65 + m) + s; n = Math.floor((n - 1) / 26); } return s; }
            function toA1(r, c) { return `${toCol(c)}${r}`; }

            wrap?.addEventListener('click', (e) => {
                const td = e.target.closest('td');
                const set = window.__a1 && window.__a1.set;
                if (td && typeof set === 'function') set(td.getAttribute('data-a1') || '');
            });
        })();
    </script>

    <script>
        // (2) 매핑 테이블 + 저장
        (function () {
            const raw = (document.getElementById('desc-json')?.textContent || '{}').trim();
            let desc = {}; try { desc = JSON.parse(raw); } catch { desc = {}; }
            if (!Array.isArray(desc.Fields)) desc.Fields = [];
            if (!Array.isArray(desc.Approvals)) desc.Approvals = [];

            const fieldsBody = document.getElementById('tblFieldsBody');
            const apprBody = document.getElementById('tblApprBody');

            function opt(val, text, sel) { const o = document.createElement('option'); o.value = val; o.text = text; if (sel) o.selected = true; return o; }
            window.__a1 = window.__a1 || {};

            function render() {
                if (desc.Fields.length === 0) desc.Fields.push({ Key: "", Type: "Text", Cell: { A1: "" } });
                fieldsBody.innerHTML = '';
                desc.Fields.forEach((f, i) => {
                    const tr = document.createElement('tr');

                    const tdKey = document.createElement('td');
                    const inpKey = document.createElement('input');
                    inpKey.className = 'form-control form-control-sm key-input';
                    inpKey.value = f.Key || '';
                    inpKey.addEventListener('input', e => { desc.Fields[i].Key = e.target.value; });
                    tdKey.appendChild(inpKey);

                    const tdType = document.createElement('td');
                    const sel = document.createElement('select');
                    sel.className = 'form-select form-select-sm';
                    sel.append(opt('Text', '@S["DTL_Type_Text"]', (f.Type || 'Text') === 'Text'));
                    sel.append(opt('Date', '@S["DTL_Type_Date"]', (f.Type || 'Text') === 'Date'));
                    sel.append(opt('Num', '@S["DTL_Type_Num"]', (f.Type || 'Text') === 'Num'));
                    sel.addEventListener('change', e => { desc.Fields[i].Type = e.target.value; });
                    tdType.appendChild(sel);

                    const tdA1 = document.createElement('td');
                    tdA1.className = 'cell-a1';
                    const inputA1 = document.createElement('input');
                    inputA1.className = 'form-control form-control-sm d-inline-block';
                    inputA1.style.width = '8rem';
                    inputA1.value = (f.Cell && f.Cell.A1) || '';
                    inputA1.addEventListener('input', e => { desc.Fields[i].Cell = desc.Fields[i].Cell || {}; desc.Fields[i].Cell.A1 = e.target.value; });
                    inputA1.addEventListener('focus', () => { window.__a1.set = (a1) => { desc.Fields[i].Cell = desc.Fields[i].Cell || {}; desc.Fields[i].Cell.A1 = a1; inputA1.value = a1; inputA1.classList.add('a1-active'); setTimeout(() => inputA1.classList.remove('a1-active'), 800); }; });

                    const inputA1 = document.createElement('input');
                    inputA1.className = 'form-control';
                    inputA1.value = (f.Cell && f.Cell.A1) || '';
                    inputA1.addEventListener('input', e => {
                        desc.Fields[i].Cell = desc.Fields[i].Cell || {};
                        desc.Fields[i].Cell.A1 = e.target.value;
                    });
                    inputA1.addEventListener('focus', () => {
                        window.__a1.set = (a1) => {
                            desc.Fields[i].Cell = desc.Fields[i].Cell || {};
                            desc.Fields[i].Cell.A1 = a1;
                            inputA1.value = a1;
                            inputA1.classList.add('a1-active');
                            setTimeout(() => inputA1.classList.remove('a1-active'), 800);
                        };
                    });

                    const pickBtn = document.createElement('button');
                    pickBtn.type = 'button'; pickBtn.className = 'btn btn-outline-secondary btn-sm ms-2'; pickBtn.textContent = L.PickCell;
                    pickBtn.addEventListener('click', () => {
                        inputA1.focus();
                        document.getElementById('xlPreview').scrollIntoView({ behavior: 'smooth', block: 'start' });
                    });
                    grp.append(inputA1, pickBtn);
                    tdA1.appendChild(grp);
                    tr.append(tdKey, tdType, tdA1);
                    fieldsBody.appendChild(tr);
                });

                // 결재
                apprBody.innerHTML = '';
                if (desc.Approvals.length === 0) {
                    const tr = document.createElement('tr'); const td = document.createElement('td');
                    td.colSpan = 3; td.className = 'text-muted'; td.textContent = L.NoRows; tr.appendChild(td); apprBody.appendChild(tr);
                } else {
                    desc.Approvals.forEach((a, i) => {
                        const tr = document.createElement('tr');

                        const tdS = document.createElement('td');
                        const inpS = document.createElement('input');
                        inpS.type = 'number'; inpS.min = '1'; inpS.className = 'form-control form-control-sm';
                        inpS.value = a.Slot ?? 1;
                        inpS.addEventListener('input', e => { desc.Approvals[i].Slot = parseInt(e.target.value || '1'); });
                        tdS.appendChild(inpS);

                        const tdP = document.createElement('td');
                        const inpP = document.createElement('input');
                        inpP.className = 'form-control form-control-sm';
                        inpP.value = a.Part || '';
                        inpP.addEventListener('input', e => { desc.Approvals[i].Part = e.target.value; });
                        tdP.appendChild(inpP);

                        const tdA1 = document.createElement('td');
                        const inputA1 = document.createElement('input');
                        inputA1.className = 'form-control form-control-sm d-inline-block';
                        inputA1.style.width = '8rem';
                        inputA1.value = (a.Cell && a.Cell.A1) || '';
                        inputA1.addEventListener('input', e => { desc.Approvals[i].Cell = desc.Approvals[i].Cell || {}; desc.Approvals[i].Cell.A1 = e.target.value; });
                        inputA1.addEventListener('focus', () => { window.__a1.set = (a1) => { desc.Approvals[i].Cell = desc.Approvals[i].Cell || {}; desc.Approvals[i].Cell.A1 = a1; inputA1.value = a1; inputA1.classList.add('a1-active'); setTimeout(() => inputA1.classList.remove('a1-active'), 800); }; });

                        const pickBtn = document.createElement('button');
                        pickBtn.type = 'button'; pickBtn.className = 'btn btn-outline-secondary btn-sm ms-2'; pickBtn.textContent = L.PickCell;
                        pickBtn.addEventListener('click', () => {
                            inputA1.focus();
                            document.getElementById('xlPreview').scrollIntoView({ behavior: 'smooth', block: 'start' });
                        });

                        tdA1.append(inputA1, pickBtn);
                        tr.append(tdS, tdP, tdA1);
                        apprBody.appendChild(tr);
                    });
                }
            }

            document.getElementById('btnAddField').addEventListener('click', () => { desc.Fields.push({ Key: "", Type: "Text", Cell: { A1: "" } }); render(); });
            document.getElementById('btnAddAppr').addEventListener('click', () => { desc.Approvals.push({ Slot: 1, Part: "", Cell: { A1: "" } }); render(); });
            document.getElementById('btnSave').addEventListener('click', () => {
                document.getElementById('descriptor').value = JSON.stringify(desc);
                document.getElementById('mapForm').submit();
            });

            render();
        })();
    </script>
}
