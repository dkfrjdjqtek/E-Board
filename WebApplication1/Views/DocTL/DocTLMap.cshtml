// File: Views/DocTL/DocTLMap.cshtml
@using System.Text.Json
@inject Microsoft.Extensions.Localization.IStringLocalizer<SharedResource> S
@{
    ViewData["Title"] = S["DTL_Title_NewTemplate"];
}
<style>
    .flex-eq {
        flex: 1 0 0;
        min-width: 0;
    }

    .table thead th {
        white-space: nowrap;
    }

    .cell-a1 {
        width: 14rem;
    }

    .key-input {
        min-width: 10rem;
    }

    .a1-active {
        box-shadow: 0 0 0 .2rem rgba(13,110,253,.25);
    }

    .cell-a1 .input-group {
        max-width: 14rem;
    }

    .cell-a1 .form-control {
        max-width: 8rem;
    }

    .cell-a1 .btn {
        white-space: nowrap;
    }

    #xlPreview {
        overflow: auto;
        max-height: 520px;
        border: 1px solid #e5e7eb;
        border-radius: .25rem;
    }

        #xlPreview table {
            table-layout: fixed;
            border-collapse: collapse;
            width: max-content;
            min-width: 100%;
        }

        #xlPreview th, #xlPreview td {
            border: 1px solid #e5e7eb;
            padding: 2px 4px;
            font-size: 12px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        #xlPreview .rc {
            background: #f9fafb;
        }
</style>

<div class="container-fluid py-3">
    <h5 class="mb-3">@S["DTL_Title_NewTemplate"]</h5>

    @{
        var alertMsg = (TempData["Alert"] as string) ?? (ViewBag.Alert as string);
    }
    @if (!string.IsNullOrWhiteSpace(alertMsg))
    {
        <div class="alert alert-danger mb-3">@alertMsg</div>
    }

    <!-- 디스크립터 JSON -->
    <script id="desc-json" type="application/json">
        @Html.Raw(ViewBag.DescriptorJson ?? "{}")
    </script>
    <!-- 엑셀 미리보기 JSON -->
    <script id="preview-json" type="application/json">
        @Html.Raw(ViewBag.PreviewJson ?? "{}")
    </script>

    <form id="mapForm" method="post" action="/DocumentTemplates/map-save">
        @Html.AntiForgeryToken()
        <input type="hidden" name="descriptor" id="descriptor">
        <input type="hidden" name="excelPath" value="@ViewBag.ExcelPath">

        <div class="row g-3">
            <!-- 입력 필드 매핑 -->
            <div class="col-12 col-lg-7">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center py-2">
                        <span>@S["DTL_Section_Fields"]</span>
                        <button id="btnAddField" type="button" class="btn btn-outline-primary btn-sm">@S["_CM_Add"]</button>
                    </div>
                    <div class="card-body p-2">
                        <div class="table-responsive">
                            <table class="table table-sm align-middle mb-0">
                                <thead>
                                    <tr>
                                        <th>@S["DTL_Col_FieldKey"]</th>
                                        <th style="width:8rem">@S["DTL_Col_Type"]</th>
                                        <th class="cell-a1">@S["DTL_Col_CellA1"]</th>
                                    </tr>
                                </thead>
                                <tbody id="tblFieldsBody"></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 결재란 매핑 -->
            <div class="col-12 col-lg-5">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center py-2">
                        <span>@S["DTL_Section_Approvals"]</span>
                        <button id="btnAddAppr" type="button" class="btn btn-outline-primary btn-sm">@S["_CM_Add"]</button>
                    </div>
                    <div class="card-body p-2">
                        <div class="table-responsive">
                            <table class="table table-sm align-middle mb-0">
                                <thead>
                                    <tr>
                                        <th style="width:4rem">@S["DTL_Col_Slot"]</th>
                                        <th style="width:6rem">@S["DTL_Col_Part"]</th>
                                        <th class="cell-a1">@S["DTL_Col_CellA1"]</th>
                                    </tr>
                                </thead>
                                <tbody id="tblApprBody"></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 엑셀 미리보기 -->
            <div class="col-12">
                <div class="card">
                    <div class="card-header py-2">@S["DTL_Section_Preview"]</div>
                    <div class="card-body">
                        <div class="text-muted small mb-2">@S["DTL_Info_ClickToFill"]</div>
                        <div id="xlPreview" class="mt-2"></div>
                        <div class="form-text mt-2">@S["DTL_Preview_MaxNote"]</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 하단 버튼 -->
        <div class="d-flex gap-2 mt-3">
            <button id="btnSave" type="button" class="btn btn-primary flex-eq">@S["_CM_Save"]</button>
            <a class="btn btn-secondary flex-eq" href="javascript:history.back()">@S["_CM_Close"]</a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        // 스크립트에서 쓰는 다국어 텍스트 (★ JS 안전 주입)
        const L = {
            PickCell: @Html.Raw(JsonSerializer.Serialize(S["DTL_Btn_PickCell"].Value)),
            NoRows: @Html.Raw(JsonSerializer.Serialize(S["DTL_Msg_NoRows"].Value)),
            NoPreview: @Html.Raw(JsonSerializer.Serialize(S["DTL_NoPreview"].Value))
                };
        const T = {
            TypeText: @Html.Raw(JsonSerializer.Serialize(S["DTL_Type_Text"].Value)),
            TypeDate: @Html.Raw(JsonSerializer.Serialize(S["DTL_Type_Date"].Value)),
            TypeNum: @Html.Raw(JsonSerializer.Serialize(S["DTL_Type_Num"].Value))
                };
    </script>

    <script>
        // (1) Excel preview (merge/width 반영) + 셀 클릭 훅
        (function () {
            const raw = (document.getElementById('preview-json')?.textContent || '{}').trim();
            let preview = {};
            try { preview = JSON.parse(raw); } catch { preview = {}; }
            const wrap = document.getElementById('xlPreview');
            if (!preview.cells) {
                if (wrap) wrap.innerHTML = '<div class="text-muted">' + L.NoPreview + '</div>';
                return;
            }

            const merges = preview.merges || [];
            const skip = Array.from({ length: preview.rows + 1 }, () => Array(preview.cols + 1).fill(false));
            const topLeft = new Map();
            for (const [r1, c1, r2, c2] of merges) {
                const rs = r2 - r1 + 1, cs = c2 - c1 + 1;
                topLeft.set(`${r1},${c1}`, { rs, cs });
                for (let r = r1; r <= r2; r++) for (let c = c1; c <= c2; c++) if (!(r === r1 && c === c1)) skip[r][c] = true;
            }

            const scale = 6;
            const colW = (preview.colW || []).map(w => Math.max(32, Math.round(w * scale)));

            let html = `<table><colgroup>`;
            for (let c = 1; c <= preview.cols; c++) html += `<col style="width:${colW[c - 1] || 80}px">`;
            html += `</colgroup><thead><tr><th class="rc"></th>`;
            for (let c = 1; c <= preview.cols; c++) html += `<th class="rc">${toCol(c)}</th>`;
            html += `</tr></thead><tbody>`;
            for (let r = 1; r <= preview.rows; r++) {
                html += `<tr><th class="rc">${r}</th>`;
                for (let c = 1; c <= preview.cols; c++) {
                    if (skip[r][c]) continue;
                    const key = `${r},${c}`;
                    const span = topLeft.get(key);
                    const rs = span?.rs || 1, cs = span?.cs || 1;
                    //const txt = (preview.cells[r - 1]?.[c - 1] || '').replace(/&/g, '&amp;').replace(/</g, '&lt;');
                    const txt = (preview.cells[r - 1]?.[c - 1] || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                    html += `<td ${rs > 1 ? `rowspan="${rs}"` : ''} ${cs > 1 ? `colspan="${cs}"` : ''} data-a1="${toA1(r, c)}">${txt}</td>`;
                    
                }
                html += `</tr>`;
            }
            html += `</tbody></table>`;

            if (wrap) wrap.innerHTML = html;

            function toCol(n) { let s = ''; while (n > 0) { const m = (n - 1) % 26; s = String.fromCharCode(65 + m) + s; n = Math.floor((n - 1) / 26); } return s; }
            function toA1(r, c) { return `${toCol(c)}${r}`; }

            wrap?.addEventListener('click', (e) => {
                const td = e.target.closest('td');
                const set = window.__a1 && window.__a1.set;
                if (td && typeof set === 'function') set(td.getAttribute('data-a1') || '');
            });
        })();
    </script>

    <script>
        // (2) 매핑 테이블 + 저장  — 기존 블록 전체를 이 블록으로 교체
        (function () {
            const raw = (document.getElementById('desc-json')?.textContent || '{}').trim();
            let desc = {}; try { desc = JSON.parse(raw); } catch { desc = {}; }
            if (!Array.isArray(desc.Fields)) desc.Fields = [];
            if (!Array.isArray(desc.Approvals)) desc.Approvals = [];

            const fieldsBody = document.getElementById('tblFieldsBody');
            const apprBody = document.getElementById('tblApprBody');

            function opt(val, text, sel) {
                const o = document.createElement('option'); o.value = val; o.text = text; if (sel) o.selected = true; return o;
            }
            window.__a1 = window.__a1 || {};

            function render() {
                /* ===== Fields ===== */
                if (desc.Fields.length === 0) desc.Fields.push({ Key: "", Type: "Text", Cell: { A1: "" } });
                fieldsBody.innerHTML = '';
                desc.Fields.forEach((f, i) => {
                    const tr = document.createElement('tr');

                    // Key
                    const tdKey = document.createElement('td');
                    const inpKey = document.createElement('input');
                    inpKey.className = 'form-control form-control-sm key-input';
                    inpKey.placeholder = '예: Item_{n} 또는 Item_{row}';
                    inpKey.value = f.Key || '';
                    inpKey.addEventListener('input', e => { desc.Fields[i].Key = e.target.value; });
                    tdKey.appendChild(inpKey);

                    // Type
                    const tdType = document.createElement('td');
                    const sel = document.createElement('select');
                    sel.className = 'form-select form-select-sm';
                    sel.append(opt('Text', T.TypeText, (f.Type || 'Text') === 'Text'));
                    sel.append(opt('Date', T.TypeDate, (f.Type || 'Text') === 'Date'));
                    sel.append(opt('Num', T.TypeNum, (f.Type || 'Text') === 'Num'));
                    sel.addEventListener('change', e => { desc.Fields[i].Type = e.target.value; });
                    tdType.appendChild(sel);

                    // Cell (A1) + 버튼
                    const tdA1 = document.createElement('td');
                    tdA1.className = 'cell-a1';
                    const grp = document.createElement('div');
                    grp.className = 'input-group input-group-sm';

                    const inputA1 = document.createElement('input');
                    inputA1.className = 'form-control';
                    inputA1.placeholder = '예: C9 또는 C9:C35';
                    inputA1.value = (f.Cell && f.Cell.A1) || '';
                    inputA1.addEventListener('input', e => {
                        desc.Fields[i].Cell = desc.Fields[i].Cell || {};
                        desc.Fields[i].Cell.A1 = e.target.value;
                    });
                    inputA1.addEventListener('focus', () => {
                        window.__a1.set = (a1) => {
                            desc.Fields[i].Cell = desc.Fields[i].Cell || {};
                            desc.Fields[i].Cell.A1 = a1;
                            inputA1.value = a1;
                            inputA1.classList.add('a1-active');
                            setTimeout(() => inputA1.classList.remove('a1-active'), 800);
                        };
                    });

                    const pickBtn = document.createElement('button');
                    pickBtn.type = 'button';
                    pickBtn.className = 'btn btn-outline-secondary';
                    pickBtn.textContent = L.PickCell;
                    pickBtn.addEventListener('click', () => {
                        inputA1.focus();
                        document.getElementById('xlPreview').scrollIntoView({ behavior: 'smooth', block: 'start' });
                    });

                    grp.append(inputA1, pickBtn);
                    tdA1.appendChild(grp);

                    tr.append(tdKey, tdType, tdA1);
                    fieldsBody.appendChild(tr);
                });

                /* ===== Approvals ===== */
                apprBody.innerHTML = '';
                if (desc.Approvals.length === 0) {
                    const tr = document.createElement('tr');
                    const td = document.createElement('td');
                    td.colSpan = 3; td.className = 'text-muted'; td.textContent = L.NoRows;
                    tr.appendChild(td); apprBody.appendChild(tr);
                } else {
                    desc.Approvals.forEach((a, i) => {
                        const tr = document.createElement('tr');

                        // Slot
                        const tdS = document.createElement('td');
                        const inpS = document.createElement('input');
                        inpS.type = 'number'; inpS.min = '1'; inpS.className = 'form-control form-control-sm';
                        inpS.value = a.Slot ?? 1;
                        inpS.addEventListener('input', e => { desc.Approvals[i].Slot = parseInt(e.target.value || '1'); });
                        tdS.appendChild(inpS);

                        // Part
                        const tdP = document.createElement('td');
                        const inpP = document.createElement('input');
                        inpP.className = 'form-control form-control-sm';
                        inpP.value = a.Part || '';
                        inpP.addEventListener('input', e => { desc.Approvals[i].Part = e.target.value; });
                        tdP.appendChild(inpP);

                        // Cell + 버튼
                        const tdA1 = document.createElement('td');
                        tdA1.className = 'cell-a1';
                        const grp = document.createElement('div');
                        grp.className = 'input-group input-group-sm';

                        const inputA1 = document.createElement('input');
                        inputA1.className = 'form-control';
                        inputA1.placeholder = '예: H4';
                        inputA1.value = (a.Cell && a.Cell.A1) || '';
                        inputA1.addEventListener('input', e => {
                            desc.Approvals[i].Cell = desc.Approvals[i].Cell || {};
                            desc.Approvals[i].Cell.A1 = e.target.value;
                        });
                        inputA1.addEventListener('focus', () => {
                            window.__a1.set = (a1) => {
                                desc.Approvals[i].Cell = desc.Approvals[i].Cell || {};
                                desc.Approvals[i].Cell.A1 = a1;
                                inputA1.value = a1;
                                inputA1.classList.add('a1-active');
                                setTimeout(() => inputA1.classList.remove('a1-active'), 800);
                            };
                        });

                        const pickBtn = document.createElement('button');
                        pickBtn.type = 'button';
                        pickBtn.className = 'btn btn-outline-secondary';
                        pickBtn.textContent = L.PickCell;
                        pickBtn.addEventListener('click', () => {
                            inputA1.focus();
                            document.getElementById('xlPreview').scrollIntoView({ behavior: 'smooth', block: 'start' });
                        });

                        grp.append(inputA1, pickBtn);
                        tdA1.appendChild(grp);

                        tr.append(tdS, tdP, tdA1);
                        apprBody.appendChild(tr);
                    });
                }
            }

            // 행 추가 버튼
            document.getElementById('btnAddField').addEventListener('click', () => {
                desc.Fields.push({ Key: "", Type: "Text", Cell: { A1: "" } }); render();
            });
            document.getElementById('btnAddAppr').addEventListener('click', () => {
                desc.Approvals.push({ Slot: 1, Part: "", Cell: { A1: "" } }); render();
            });

            // ---------------------------
            // 2025.09.15 저장 시 "범위 한 줄 정의" 확장 로직
            // ---------------------------
            function tryParseRange(a1) {
                const m = String(a1 || '').trim().toUpperCase().match(/^([A-Z]+)(\d+):([A-Z]+)(\d+)$/);
                if (!m || m[1] !== m[3]) return null;
                let r1 = parseInt(m[2], 10), r2 = parseInt(m[4], 10);
                if (r2 < r1) [r1, r2] = [r2, r1];
                return { col: m[1], r1, r2 };
            }

            function expandFieldsForSave(fields) {
                const out = [];
                for (const f of fields) {
                    const a1 = f?.Cell?.A1 || '';
                    const rg = tryParseRange(a1);
                    if (!rg) { out.push(f); continue; }

                    const tpl = (f.Key || '').trim();
                    let idx = 1;
                    for (let r = rg.r1; r <= rg.r2; r++, idx++) {
                        // ★ 키 템플릿 치환 + 기본값
                        let keyBase = (tpl || 'Field');
                        let key = keyBase;
                        if (key.includes('{n}')) key = key.replaceAll('{n}', String(idx));
                        if (key.includes('{row}')) key = key.replaceAll('{row}', String(r));
                        if (key === keyBase) key = `${keyBase}_${r}`;

                        out.push({
                            Key: key,
                            Type: f.Type || 'Text',
                            Cell: { A1: `${rg.col}${r}` }
                        });
                    }
                }
                return out;
            }

            // ★ 중복 키 검증
            function hasDuplicateKeys(items) {
                const seen = new Set();
                for (const it of items) {
                    const k = (it.Key || '').trim();
                    if (!k) return { ok: false, reason: 'empty' };
                    if (seen.has(k)) return { ok: false, reason: 'dup', key: k };
                    seen.add(k);
                }
                return { ok: true };
            }

            document.getElementById('btnSave').addEventListener('click', () => {
                const payload = JSON.parse(JSON.stringify(desc));
                payload.Fields = expandFieldsForSave(desc.Fields);

                // ★ 저장 직전 키 검증
                const ck = hasDuplicateKeys(payload.Fields);
                if (!ck.ok) {
                    if (ck.reason === 'empty') {
                        alert('입력 필드의 키가 비어 있습니다. 키를 입력하거나 템플릿(예: Item_{row})을 사용하세요.');
                    } else if (ck.reason === 'dup') {
                        alert(`중복된 키가 있습니다: ${ck.key}`);
                    }
                    return; // 저장 중단
                }

                document.getElementById('descriptor').value = JSON.stringify(payload);
                document.getElementById('mapForm').submit();
            });

            render();
        })();
    </script>

}
