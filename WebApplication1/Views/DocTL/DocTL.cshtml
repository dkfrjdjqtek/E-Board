@model WebApplication1.Models.DocTLViewModel
@inject Microsoft.Extensions.Localization.IStringLocalizer<SharedResource> S
@{
    ViewData["Title"] = S["DTL_Title_DocManage"];
    var isAdmin = (bool)(ViewBag.IsAdmin ?? false);
}
<style>
    .flex-eq {
        flex: 1 0 0;
        min-width: 0
    }

    .table thead th {
        white-space: nowrap
    }

    .input-group.input-group-sm > .form-select {
        height: calc(1.5em + .5rem + 2px)
    }

    .input-group.input-group-sm > .btn {
        height: calc(1.5em + .5rem + 2px)
    }

    .input-group > .form-select + .btn {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0
    }
</style>

<div class="container-fluid py-3">
    <div class="d-flex flex-wrap align-items-end gap-2 mb-3">
        <!-- Site -->
        <div>
            <label class="form-label mb-1">@S["DTL_Label_Site"]</label>
            <select id="compSelect" class="form-select form-select-sm" name="SelectedCompCd" @(isAdmin ? "" : "disabled")>
                @foreach (var it in Model.CompOptions)
                {
                    <option value="@it.Value" selected="@(it.Selected ? "selected" : null)">@it.Text</option>
                }
            </select>
        </div>

        <!-- Department -->
        <div>
            <label class="form-label mb-1">@S["DTL_Label_Dept"]</label>
            <select id="deptSelect" class="form-select form-select-sm" name="SelectedDepartmentId">
                @foreach (var it in Model.DepartmentOptions)
                {
                    <option value="@it.Value" selected="@(it.Selected ? "selected" : null)">@it.Text</option>
                }
            </select>
        </div>

        <!-- Kind + Document -->
        <div class="d-flex flex-grow-1 gap-2" style="min-width:360px;">
            <div class="flex-eq">
                <label class="form-label mb-1">@S["DTL_Label_Kind"]</label>
                <select id="kindSelect" class="form-select form-select-sm"></select>
            </div>
            <div class="flex-eq">
                <label class="form-label mb-1">@S["DTL_Label_DocName"]</label>
                <select id="docSelect" class="form-select form-select-sm" name="SelectedDocumentCode">
                    @foreach (var it in Model.DocumentOptions)
                    {
                        <option value="@it.Value">@it.Text</option>
                    }
                </select>
            </div>
        </div>

        <!-- Actions -->
        <div class="d-flex align-items-end gap-2 ms-auto" style="width:360px;">
            <a id="btnLoad" class="btn btn-secondary btn-sm flex-eq" href="javascript:void(0)">@S["DTL_Btn_Load"]</a>
            <a id="btnNewTemplate" class="btn btn-primary btn-sm flex-eq" href="javascript:void(0)">@S["DTL_Btn_NewTemplate"]</a>
        </div>
    </div>

    <div id="docArea"></div>
</div>

<!-- New Template Modal -->
<div class="modal fade" id="newTemplateModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@S["DTL_Title_NewTemplate"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <form id="frmNewTemplate" method="post" enctype="multipart/form-data" action="/DocumentTemplates/new-template" novalidate>
                @Html.AntiForgeryToken()
                <input type="hidden" name="compCd" id="nt-compCd" />
                <div class="modal-body">
                    <div id="nt-alert" class="alert alert-danger d-none mb-3"></div>

                    <div class="row g-3">
                        <div class="col-md-4">
                            <label class="form-label mb-1">@S["DTL_Label_Site"]</label>
                            <select id="nt-compSel" class="form-select form-select-sm" @(isAdmin ? "" : "disabled")></select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label mb-1">@S["DTL_Label_Dept"]</label>
                            <select id="nt-deptSel" name="departmentId" class="form-select form-select-sm"></select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label mb-1">@S["DTL_Label_Kind"]</label>
                            <div class="input-group input-group-sm align-items-stretch">
                                <select id="nt-kindSel" name="kind" class="form-select form-select-sm"></select>
                                <button type="button" id="btnKindAddToggle" class="btn btn-outline-secondary">@S["_CM_Add"]</button>
                            </div>
                        </div>

                        <!-- 새 종류 추가 -->
                        <div class="col-12 d-none" id="kindAddBox">
                            <div class="border rounded p-3">
                                <div class="row g-2">
                                    <div class="col-md-4">
                                        <label class="form-label mb-1">@S["DTL_Label_Site"]</label>
                                        <select id="ntk-compSel" class="form-select form-select-sm" @(isAdmin ? "" : "disabled")></select>
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label mb-1">@S["DTL_Label_Dept"]</label>
                                        <select id="ntk-deptSel" class="form-select form-select-sm"></select>
                                    </div>
                                </div>
                                <div class="row g-2 mt-2">
                                    <div class="col-md-6"><input id="ntk-name-ko" class="form-control form-control-sm" placeholder="한글" /></div>
                                    <div class="col-md-6"><input id="ntk-name-en" class="form-control form-control-sm" placeholder="English" /></div>
                                    <div class="col-md-6"><input id="ntk-name-vi" class="form-control form-control-sm" placeholder="Tiếng Việt" /></div>
                                    <div class="col-md-6"><input id="ntk-name-id" class="form-control form-control-sm" placeholder="Bahasa Indonesia" /></div>
                                    <div class="col-md-6"><input id="ntk-name-zh" class="form-control form-control-sm" placeholder="中文" /></div>
                                </div>
                                <div class="mt-2 d-flex gap-2">
                                    <button type="button" id="btnKindSave" class="btn btn-primary btn-sm">@S["_CM_Save"]</button>
                                    <button type="button" id="btnKindCancel" class="btn btn-outline-secondary btn-sm">@S["_CM_Close"]</button>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label mb-1">@S["DTL_Label_DocName"]</label>
                            <input id="nt-docName" type="text" name="docName" class="form-control form-control-sm" required />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label mb-1">@S["DTL_Label_Excel"]</label>
                            <div class="input-group input-group-sm">
                                <input id="nt-excel" type="file" name="excelFile" class="d-none" accept=".xlsx,.xlsm" required />
                                <label for="nt-excel" class="btn btn-outline-secondary">@S["DTL_Btn_ChooseFile"]</label>
                                <input id="nt-excel-fake" type="text" class="form-control" value="@S["DTL_File_NoFile"]" readonly />
                            </div>
                            <div class="form-text">@S["DTL_Alert_ExcelOpenXmlOnly"]</div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <div class="d-grid w-100" style="grid-template-columns: 1fr 1fr; gap:.5rem;">
                        <button type="submit" class="btn btn-primary btn-sm w-100">@S["_CM_Save"]</button>
                        <button type="button" class="btn btn-outline-secondary btn-sm w-100" data-bs-dismiss="modal">@S["_CM_Close"]</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // i18n 상수
        const L = {
            ALL: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(S["_CM_All"].Value)),
            NO_FILE: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(S["DTL_File_NoFile"].Value)),
            ALERT_SELECT: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(S["DTL_Alert_SelectDoc"].Value)),
            ALERT_SITE: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(S["DTL_Alert_SiteRequired"].Value)),
            ALERT_DOCNAME: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(S["DTL_Alert_EnterDocName"].Value)),
            ALERT_XLS_REQ: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(S["DTL_Alert_ExcelRequired"].Value)),
            ALERT_OPENXML: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(S["DTL_Alert_ExcelOpenXmlOnly"].Value)),
            SELECT: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(S["_CM_Select"].Value)),
            ADD_KIND: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(S["_CM_Add"]?.Value ?? "＋ 새 종류 추가…"))
          };
    </script>

    <!-- 부모 영역 스크립트 -->
    <script>
        (function () {
            const BASE = "/DocumentTemplates";
            const compSel = document.getElementById('compSelect');
            const deptSel = document.getElementById('deptSelect');
            const kindSel = document.getElementById('kindSelect');
            const docSel = document.getElementById('docSelect');
            const btnNew = document.getElementById('btnNewTemplate');
            const btnLoad = document.getElementById('btnLoad');

            async function fetchJson(url) { const r = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } }); if (!r.ok) throw new Error('net'); return r.json(); }
            function clearOptions(sel) { while (sel.options.length) sel.remove(0); }
            function addOptions(sel, items) { for (const it of (items || [])) sel.add(new Option(it.text ?? '', String(it.id ?? ''))); }

            async function loadDepartments() {
                const compCd = compSel.value || '';
                if (!compCd) { clearOptions(deptSel); clearOptions(docSel); updateBtnLinks(); return; }
                const data = await fetchJson(`${BASE}/get-departments?compCd=${encodeURIComponent(compCd)}`);
                clearOptions(deptSel);
                (data.items || []).forEach(it => deptSel.add(new Option(it.text ?? '', String(it.id ?? ''))));
                let target = "__SELECT__";
                if (typeof data.selectedValue !== "undefined") {
                    const want = String(data.selectedValue ?? "");
                    const has = Array.from(deptSel.options).some(o => o.value === want);
                    target = has ? want : "__SELECT__";
                }
                deptSel.value = target;
            }

            async function loadKinds() {
                const compCd = compSel.value || '';
                const deptVal = deptSel.value;
                clearOptions(kindSel);
                kindSel.add(new Option(L.SELECT, '__SELECT__'));
                if (!compCd || deptVal === '__SELECT__') { clearOptions(docSel); updateBtnLinks(); return; }
                // ▼ 스키마 반영: 공용(빈값)은 0으로 전달
                const deptParam = (deptVal === '' ? '0' : deptVal);
                const q = new URLSearchParams({ compCd, departmentId: deptParam });
                const data = await fetchJson(`${BASE}/get-kinds?${q.toString()}`);
                addOptions(kindSel, data.items || []);
                kindSel.value = '__SELECT__';
            }

            async function loadDocuments() {
                const compCd = compSel.value || '';
                const deptVal = deptSel.value;
                const rawKind = kindSel.value;
                clearOptions(docSel);
                if (!compCd || deptVal === '__SELECT__' || rawKind === '__SELECT__') { updateBtnLinks(); return; }
                const q = new URLSearchParams({ compCd });
                if (rawKind) q.append('kind', rawKind);
                if (deptVal !== '') q.append('departmentId', deptVal);
                const data = await fetchJson(`${BASE}/get-documents?${q.toString()}`);
                addOptions(docSel, data.items || []);
                updateBtnLinks();
            }

            function updateBtnLinks() {
                const compCd = compSel.value || '';
                const deptVal = deptSel.value || '';
                const rawKind = kindSel.value || '';
                const kindVal = (rawKind === '__SELECT__') ? '' : rawKind;
                const docCode = docSel.value || '';
                const qsNew = new URLSearchParams();
                if (compCd) qsNew.append('compCd', compCd);
                if (deptVal !== '' && deptVal !== '__SELECT__') qsNew.append('departmentId', deptVal);
                if (kindVal) qsNew.append('kind', kindVal);
                btnNew.href = `/DocumentTemplates/new-template${qsNew.toString() ? '?' + qsNew.toString() : ''}`;

                if (docCode) {
                    const qsOpen = new URLSearchParams();
                    if (compCd) qsOpen.append('compCd', compCd);
                    if (deptVal !== '' && deptVal !== '__SELECT__') qsOpen.append('departmentId', deptVal);
                    if (kindVal) qsOpen.append('kind', kindVal);
                    qsOpen.append('docCode', docCode);
                    btnLoad.dataset.href = `/DocumentTemplates/open?${qsOpen.toString()}`;
                } else {
                    btnLoad.dataset.href = '';
                }
            }

            btnLoad.addEventListener('click', () => {
                const href = btnLoad.dataset.href || '';
                if (!href) { alert(L.ALERT_SELECT); return; }
                window.location.href = href;
            });

            compSel.addEventListener('change', async () => { await loadDepartments(); await loadKinds(); await loadDocuments(); updateBtnLinks(); });
            deptSel.addEventListener('change', async () => { await loadKinds(); await loadDocuments(); updateBtnLinks(); });
            kindSel.addEventListener('change', async () => { await loadDocuments(); updateBtnLinks(); });
            docSel.addEventListener('change', updateBtnLinks);

            (async function init() {
                await loadDepartments();
                await loadKinds();
                await loadDocuments();
                updateBtnLinks();
            })();
        })();
    </script>

    <!-- 모달 스크립트 -->
    <script>
        (function () {
            const mEl = document.getElementById('newTemplateModal');
            const modal = () => new bootstrap.Modal(mEl, { backdrop: 'static', keyboard: false });
            function ensureModalAtBody() { if (mEl.parentElement !== document.body) document.body.appendChild(mEl); }

            const compSel = document.getElementById('compSelect');
            const deptSel = document.getElementById('deptSelect');
            const kindSel = document.getElementById('kindSelect');
            const btnNew = document.getElementById('btnNewTemplate');

            const ntCompSel = document.getElementById('nt-compSel');
            const ntDeptSel = document.getElementById('nt-deptSel');
            const ntKindSel = document.getElementById('nt-kindSel');
            const ntCompCd = document.getElementById('nt-compCd');
            const ntAlert = document.getElementById('nt-alert');

            const btnKindAddToggle = document.getElementById('btnKindAddToggle');
            const kindAddBox = document.getElementById('kindAddBox');
            const ntkCompSel = document.getElementById('ntk-compSel');
            const ntkDeptSel = document.getElementById('ntk-deptSel');
            const btnKindSave = document.getElementById('btnKindSave');
            const btnKindCancel = document.getElementById('btnKindCancel');

            const realFile = document.getElementById('nt-excel');
            const fakeFile = document.getElementById('nt-excel-fake');
            if (realFile && fakeFile) {
                fakeFile.value = L.NO_FILE;
                realFile.addEventListener('change', () => { fakeFile.value = realFile.files?.[0]?.name || L.NO_FILE; });
            }

            const BASE = "/DocumentTemplates";

            function showAlert(msg) {
                ntAlert.textContent = (msg || '').toString();
                ntAlert.style.whiteSpace = 'pre-wrap';
                ntAlert.classList.toggle('d-none', !msg);
            }
            async function fetchJson(url) {
                const r = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
                if (!r.ok) throw new Error('net');
                return r.json();
            }
            function copyOptions(from, to) {
                to.innerHTML = '';
                Array.from(from.options).forEach(o => to.add(new Option(o.text, o.value, false, o.selected)));
            }
            function fillOptions(sel, items) {
                sel.innerHTML = '';
                (items || []).forEach(it => sel.add(new Option(it.text ?? '', String(it.id ?? ''))));
            }
            async function refreshDeptFor(compCd, targetSel, preferValue) {
                const data = await fetchJson(`${BASE}/get-departments?compCd=${encodeURIComponent(compCd)}`);
                fillOptions(targetSel, data.items || []);
                let target = "__SELECT__";
                const cand = (preferValue ?? data.selectedValue);
                if (typeof cand !== "undefined") {
                    const want = String(cand ?? "");
                    const has = Array.from(targetSel.options).some(o => o.value === want);
                    target = has ? want : "__SELECT__";
                }
                targetSel.value = target;
            }
            function toggleKindAdd(show) { kindAddBox.classList.toggle('d-none', !show); }

            async function openNewTemplateModal() {
                showAlert(''); ensureModalAtBody();
                const compCd = compSel.value || '';
                if (!compCd) { alert(L.ALERT_SITE); return; }

                // 부모 선택 복제
                copyOptions(compSel, ntCompSel); ntCompSel.value = compCd; ntCompCd.value = compCd;
                await refreshDeptFor(ntCompSel.value, ntDeptSel, deptSel.value);
                if (ntDeptSel.value === "__SELECT__") ntDeptSel.value = "";

                // Kind 복제 + placeholder
                copyOptions(kindSel, ntKindSel);
                if (!Array.from(ntKindSel.options).some(o => o.value === '__SELECT__')) ntKindSel.add(new Option(L.SELECT, '__SELECT__'), 0);
                ntKindSel.value = '__SELECT__';
                toggleKindAdd(false);

                // 새 종류 패널 초기화
                copyOptions(ntCompSel, ntkCompSel); ntkCompSel.value = ntCompSel.value;
                await refreshDeptFor(ntkCompSel.value, ntkDeptSel, ntDeptSel.value);
                if (ntkDeptSel.value === "__SELECT__") ntkDeptSel.value = "";

                modal().show();
            }
            btnNew.addEventListener('click', (e) => { e.preventDefault(); openNewTemplateModal(); });

            btnKindAddToggle?.addEventListener('click', async () => {
                const willShow = kindAddBox.classList.contains('d-none');
                toggleKindAdd(willShow);
                if (willShow) {
                    copyOptions(ntCompSel, ntkCompSel); ntkCompSel.value = ntCompSel.value;
                    await refreshDeptFor(ntkCompSel.value, ntkDeptSel, ntDeptSel.value);
                    if (ntkDeptSel.value === "__SELECT__") ntkDeptSel.value = "";
                }
            });

            async function readAsJsonOrText(res) {
                const ct = (res.headers.get('content-type') || '').toLowerCase();
                if (ct.includes('application/json')) return await res.json();
                const txt = await res.text();
                return { ok: false, message: (txt || '').replace(/<[^>]+>/g, ' ').trim() };
            }
            function getAntiForgeryToken() {
                const el = document.querySelector('#frmNewTemplate input[name="__RequestVerificationToken"]');
                return el?.value || '';
            }

            // 새 종류 저장 (스키마 반영: departmentId 빈값/선택안함은 0으로 전송)
            btnKindSave.addEventListener('click', async () => {
                const compCd = ntkCompSel.value || '';
                const deptRaw = ntkDeptSel.value;
                const dept = (deptRaw === '__SELECT__' || deptRaw === '' ? '0' : deptRaw);

                const p = new URLSearchParams({
                    compCd,
                    departmentId: dept, // ← Loc(CompCd, DepartmentId) 채움
                    nameKo: document.getElementById('ntk-name-ko').value.trim(),
                    nameEn: document.getElementById('ntk-name-en').value.trim(),
                    nameVi: document.getElementById('ntk-name-vi').value.trim(),
                    nameId: document.getElementById('ntk-name-id').value.trim(),
                    nameZh: document.getElementById('ntk-name-zh').value.trim(),
                    __RequestVerificationToken: getAntiForgeryToken()
                });

                try {
                    const res = await fetch(`${BASE}/kind-add`, {
                        method: 'POST',
                        headers: { 'X-Requested-With': 'XMLHttpRequest', 'Accept': 'application/json' },
                        body: p
                    });
                    const data = await readAsJsonOrText(res);
                    if (!res.ok || !data || data.ok !== true) throw new Error((data && data.message) ? data.message : `HTTP ${res.status}`);

                    const opt = new Option(data.item.text, data.item.id, false, true);
                    ntKindSel.add(opt);
                    ntKindSel.value = data.item.id;
                    toggleKindAdd(false);

                    document.getElementById('kindSelect')?.add(new Option(data.item.text, data.item.id));
                    showAlert('');
                } catch (e) {
                    console.error(e);
                    showAlert(e?.message || 'Error');
                }
            });

            btnKindCancel.addEventListener('click', () => { toggleKindAdd(false); });

            document.getElementById('frmNewTemplate').addEventListener('submit', function (e) {
                showAlert('');
                const dn = this.elements['docName']?.value?.trim();
                const fx = this.elements['excelFile']?.files?.[0];
                if (!dn) { e.preventDefault(); showAlert(L.ALERT_DOCNAME); return; }
                if (!fx) { e.preventDefault(); showAlert(L.ALERT_XLS_REQ); return; }
                if (!/\.xlsx$|\.xlsm$/i.test(fx.name)) { e.preventDefault(); showAlert(L.ALERT_OPENXML); }
            });

            const sp = new URLSearchParams(location.search);
            if (sp.get('openNewTemplate') === '1') setTimeout(() => openNewTemplateModal(), 0);
        })();
    </script>
}
